{
  "version": 3,
  "sources": ["../../server.js", "server-entry-module:@remix-run/dev/server-build", "../../app/entry.server.jsx", "../../app/root.jsx", "../../app/store/store.js", "../../app/store/formSlice.js", "../../app/context/ThemeContext.jsx", "../../app/routes/form-preview.$formId.jsx", "../../app/components/FormPreview.jsx", "../../app/components/helper.jsx", "../../app/components/ThemeToggle.jsx", "../../app/routes/edit-form.$formId.jsx", "../../app/components/FormBuilder.jsx", "../../app/components/Question/QuestionHeader.jsx", "../../app/components/FieldTypes.jsx", "../../app/components/FormCanvas.jsx", "../../app/components/QuestionComponent.jsx", "../../app/components/Question/QuestionBody.jsx", "../../app/components/Question/QuestionOptions.jsx", "../../app/components/OptionItem.jsx", "../../app/components/Question/QuestionFooter.jsx", "../../app/components/Question/ValidationRules.jsx", "../../app/data/formTemplates.js", "../../app/routes/form-builder.jsx", "../../app/routes/form.$formId.jsx", "../../app/routes/_index.jsx", "server-assets-manifest:@remix-run/dev/assets-manifest"],
  "sourcesContent": ["import { createRequestHandler } from '@remix-run/netlify';\r\nimport * as build from '@remix-run/dev/server-build';\r\n\r\nexport const handler = createRequestHandler({\r\n  build,\r\n  mode: process.env.NODE_ENV,\r\n});", "\nimport * as entryServer from \"C:\\\\Users\\\\utkri\\\\form-builder-app-js\\\\app\\\\entry.server.jsx\";\nimport * as route0 from \"./root.jsx\";\nimport * as route1 from \"./routes/form-preview.$formId.jsx\";\nimport * as route2 from \"./routes/edit-form.$formId.jsx\";\nimport * as route3 from \"./routes/form-builder.jsx\";\nimport * as route4 from \"./routes/form.$formId.jsx\";\nimport * as route5 from \"./routes/_index.jsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"v3_routeConfig\":false,\"v3_singleFetch\":false,\"v3_lazyRouteDiscovery\":false,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/form-preview.$formId\": {\n      id: \"routes/form-preview.$formId\",\n      parentId: \"root\",\n      path: \"form-preview/:formId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/edit-form.$formId\": {\n      id: \"routes/edit-form.$formId\",\n      parentId: \"root\",\n      path: \"edit-form/:formId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/form-builder\": {\n      id: \"routes/form-builder\",\n      parentId: \"root\",\n      path: \"form-builder\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/form.$formId\": {\n      id: \"routes/form.$formId\",\n      parentId: \"root\",\n      path: \"form/:formId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    }\n  };", "// /**\r\n//  * By default, Remix will handle generating the HTTP Response for you.\r\n//  * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\r\n//  * For more information, see https://remix.run/file-conventions/entry.server\r\n//  */\r\n\r\n// import { PassThrough } from \"node:stream\";\r\n\r\n// import { createReadableStreamFromReadable } from \"@remix-run/node\";\r\n// import { RemixServer } from \"@remix-run/react\";\r\n// import { isbot } from \"isbot\";\r\n// import { renderToPipeableStream } from \"react-dom/server\";\r\n\r\n// const ABORT_DELAY = 5_000;\r\n\r\n// export default function handleRequest(\r\n//   request,\r\n//   responseStatusCode,\r\n//   responseHeaders,\r\n//   remixContext,\r\n//   // This is ignored so we can keep it in the template for visibility. Feel\r\n//   // free to delete this parameter in your app if you're not using it!\r\n//   // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n//   loadContext\r\n// ) {\r\n//   return isbot(request.headers.get(\"user-agent\") || \"\")\r\n//     ? handleBotRequest(\r\n//         request,\r\n//         responseStatusCode,\r\n//         responseHeaders,\r\n//         remixContext\r\n//       )\r\n//     : handleBrowserRequest(\r\n//         request,\r\n//         responseStatusCode,\r\n//         responseHeaders,\r\n//         remixContext\r\n//       );\r\n// }\r\n\r\n// function handleBotRequest(\r\n//   request,\r\n//   responseStatusCode,\r\n//   responseHeaders,\r\n//   remixContext\r\n// ) {\r\n//   return new Promise((resolve, reject) => {\r\n//     let shellRendered = false;\r\n//     const { pipe, abort } = renderToPipeableStream(\r\n//       <RemixServer\r\n//         context={remixContext}\r\n//         url={request.url}\r\n//         abortDelay={ABORT_DELAY}\r\n//       />,\r\n//       {\r\n//         onAllReady() {\r\n//           shellRendered = true;\r\n//           const body = new PassThrough();\r\n//           const stream = createReadableStreamFromReadable(body);\r\n\r\n//           responseHeaders.set(\"Content-Type\", \"text/html\");\r\n\r\n//           resolve(\r\n//             new Response(stream, {\r\n//               headers: responseHeaders,\r\n//               status: responseStatusCode,\r\n//             })\r\n//           );\r\n\r\n//           pipe(body);\r\n//         },\r\n//         onShellError(error) { // Removed : unknown type annotation\r\n//           reject(error);\r\n//         },\r\n//         onError(error) { // Removed : unknown type annotation\r\n//           responseStatusCode = 500;\r\n//           // Log streaming rendering errors from inside the shell. Don't log\r\n//           // errors encountered during initial shell rendering since they'll\r\n//           // reject and get logged in handleDocumentRequest.\r\n//           if (shellRendered) {\r\n//             console.error(error);\r\n//           }\r\n//         },\r\n//       }\r\n//     );\r\n\r\n//     setTimeout(abort, ABORT_DELAY);\r\n//   });\r\n// }\r\n\r\n// function handleBrowserRequest(\r\n//   request,\r\n//   responseStatusCode,\r\n//   responseHeaders,\r\n//   remixContext\r\n// ) {\r\n//   return new Promise((resolve, reject) => {\r\n//     let shellRendered = false;\r\n//     const { pipe, abort } = renderToPipeableStream(\r\n//       <RemixServer\r\n//         context={remixContext}\r\n//         url={request.url}\r\n//         abortDelay={ABORT_DELAY}\r\n//       />,\r\n//       {\r\n//         onShellReady() {\r\n//           shellRendered = true;\r\n//           const body = new PassThrough();\r\n//           const stream = createReadableStreamFromReadable(body);\r\n\r\n//           responseHeaders.set(\"Content-Type\", \"text/html\");\r\n\r\n//           resolve(\r\n//             new Response(stream, {\r\n//               headers: responseHeaders,\r\n//               status: responseStatusCode,\r\n//             })\r\n//           );\r\n\r\n//           pipe(body);\r\n//         },\r\n//         onShellError(error) { // Removed : unknown type annotation\r\n//           reject(error);\r\n//         },\r\n//         onError(error) { // Removed : unknown type annotation\r\n//           responseStatusCode = 500;\r\n//           // Log streaming rendering errors from inside the shell. Don't log\r\n//           // errors encountered during initial shell rendering since they'll\r\n//           // reject and get logged in handleDocumentRequest.\r\n//           if (shellRendered) {\r\n//             console.error(error);\r\n//           }\r\n//         },\r\n//       }\r\n//     );\r\n\r\n//     setTimeout(abort, ABORT_DELAY);\r\n//   });\r\n// }\r\n\r\n// entry.server.jsx\r\nimport { PassThrough } from \"stream\";\r\nimport { RemixServer } from \"@remix-run/react\";\r\nimport { renderToPipeableStream } from \"react-dom/server\";\r\n\r\nexport default function handleRequest(\r\n  request,\r\n  responseStatusCode,\r\n  responseHeaders,\r\n  remixContext\r\n) {\r\n  return new Promise((resolve, reject) => {\r\n    let didError = false;\r\n\r\n    const { pipe, abort } = renderToPipeableStream(\r\n      <RemixServer context={remixContext} url={request.url} />,\r\n      {\r\n        onShellReady() {\r\n          const body = new PassThrough();\r\n\r\n          responseHeaders.set(\"Content-Type\", \"text/html\");\r\n\r\n          resolve(\r\n            new Response(body, {\r\n              status: didError ? 500 : responseStatusCode,\r\n              headers: responseHeaders,\r\n            })\r\n          );\r\n\r\n          pipe(body);\r\n        },\r\n        onShellError(err) {\r\n          reject(err);\r\n        },\r\n        onError(err) {\r\n          didError = true;\r\n          console.error(err);\r\n        },\r\n      }\r\n    );\r\n\r\n    setTimeout(abort, 5000);\r\n  });\r\n}\r\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\n\nimport { Provider } from 'react-redux'; // <<< THIS IS CRUCIAL\nimport { store } from './store/store'; // <<< THIS IS CRUCIAL (ensure path is correct)\n\nimport stylesheet from \"./tailwind.css\"; // Your main Tailwind CSS import\nimport { ThemeProvider } from \"./context/ThemeContext\"; // Adjust the import path as necessary\n\nexport function links() {\n  return [{ rel: \"stylesheet\", href: stylesheet }];\n}\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\r\n      <head>\r\n        <meta charSet=\"utf-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\r\n        <Meta />\r\n        <Links />\r\n      </head>\r\n      <body className=\"h-full\">\r\n        <ThemeProvider>\r\n          <Provider store={store}>\r\n            <div className=\"min-h-screen bg-white dark:bg-gray-900 transition-colors\">\r\n              <Outlet />\r\n              <ScrollRestoration />\r\n              <Scripts />\r\n              <LiveReload />\r\n            </div>\r\n          </Provider>\r\n        </ThemeProvider>\r\n      </body>\r\n    </html>);\n\n}", "import { configureStore } from '@reduxjs/toolkit';\r\nimport formReducer from './formSlice'; // Import the form slice reducer\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    form: formReducer, // Assign the form reducer to the 'form' key in the store\r\n  },\r\n  // You can add middleware here if needed (e.g., redux-thunk, redux-logger)\r\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(myLogger),\r\n});", "import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  title: 'Untitled form',\r\n  description: '',\r\n  questions: [], // Array of question objects\r\n};\r\n\r\nconst formSlice = createSlice({\r\n  name: 'form',\r\n  initialState,\r\n  reducers: {\r\n    setInitialForm: (state, action) => {\r\n      // When loading an existing form, ensure all fields have 'name' and default validation properties\r\n      state.title = action.payload.title || 'Untitled form';\r\n      state.description = action.payload.description || '';\r\n      state.questions = action.payload.fields ? action.payload.fields.map(q => ({\r\n        ...q,\r\n        // name: q.id, // Ensure 'name' is set from 'id' when loading\r\n        minLength: q.minLength !== undefined ? q.minLength : undefined,\r\n        maxLength: q.maxLength !== undefined ? q.maxLength : undefined,\r\n        pattern: q.pattern !== undefined ? q.pattern : undefined,\r\n        options: q.options || [], // Ensure options array exists\r\n      })) : [];\r\n    },\r\n    updateFormDetails: (state, action) => {\r\n      const { title, description } = action.payload;\r\n      if (title !== undefined) {\r\n        state.title = title;\r\n      }\r\n      if (description !== undefined) {\r\n        state.description = description;\r\n      }\r\n    },\r\n    addQuestion: (state, action) => {\r\n      // When adding a new question, ensure 'name' is initialized from 'id'\r\n      // and default validation properties are present\r\n      state.questions.push({\r\n        ...action.payload,\r\n        // name: action.payload.id, // Ensure 'name' is set from 'id' when adding\r\n        minLength: action.payload.minLength !== undefined ? action.payload.minLength : undefined,\r\n        maxLength: action.payload.maxLength !== undefined ? action.payload.maxLength : undefined,\r\n        pattern: action.payload.pattern !== undefined ? action.payload.pattern : undefined,\r\n        options: action.payload.options || [], // Ensure options array is initialized for new questions\r\n      });\r\n    },\r\n    removeQuestion: (state, action) => {\r\n      const questionIdToRemove = action.payload; // payload is the question ID\r\n      state.questions = state.questions.filter(q => q.id !== questionIdToRemove);\r\n    },\r\n    updateQuestion: (state, action) => {\r\n      const updatedQuestion = action.payload;\r\n      const index = state.questions.findIndex(q => q.id === updatedQuestion.id);\r\n      if (index !== -1) {\r\n        state.questions[index] = updatedQuestion;\r\n      }\r\n    },\r\n    addOption: (state, action) => {\r\n      const { questionId, newOption } = action.payload;\r\n      const question = state.questions.find(q => q.id === questionId);\r\n      if (question && (question.type === 'multiple-choice' || question.type === 'checkboxes' || question.type === 'dropdown' || question.type === 'radio')) {\r\n        question.options.push(newOption);\r\n      }\r\n    },\r\n    removeOption: (state, action) => {\r\n      const { questionId, optionIdToRemove } = action.payload;\r\n      const question = state.questions.find(q => q.id === questionId);\r\n      if (question && question.options) {\r\n        question.options = question.options.filter(opt => opt.id !== optionIdToRemove);\r\n        // Ensure at least one option exists if all are removed for choice-based types\r\n        if (question.options.length === 0 && (question.type === 'multiple-choice' || question.type === 'checkboxes' || question.type === 'dropdown' || question.type === 'radio')) {\r\n          question.options.push({ id: `opt-${Date.now()}-1`, text: 'Option 1' });\r\n        }\r\n      }\r\n    },\r\n    updateOption: (state, action) => {\r\n      const { questionId, updatedOption } = action.payload;\r\n      const question = state.questions.find(q => q.id === questionId);\r\n      if (question && question.options) {\r\n        const optionIndex = question.options.findIndex(opt => opt.id === updatedOption.id);\r\n        if (optionIndex !== -1) {\r\n          question.options[optionIndex] = updatedOption;\r\n        }\r\n      }\r\n    },\r\n    reorderQuestions: (state, action) => {\r\n      const { draggedIndex, droppedOverIndex } = action.payload;\r\n      const [draggedItem] = state.questions.splice(draggedIndex, 1);\r\n      state.questions.splice(droppedOverIndex, 0, draggedItem);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setInitialForm,\r\n  updateFormDetails,\r\n  addQuestion,\r\n  removeQuestion,\r\n  updateQuestion,\r\n  addOption,\r\n  removeOption,\r\n  updateOption,\r\n  reorderQuestions,\r\n} = formSlice.actions;\r\n\r\nexport default formSlice.reducer;\r\n", "import { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst ThemeContext = createContext(undefined);\r\n\r\nexport function ThemeProvider({ children }) {\r\n  const [theme, setTheme] = useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      return localStorage.getItem('theme') || 'light';\r\n    }\r\n    return 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n     const root = window.document.documentElement;\r\n    // Apply theme on mount and when theme changes\r\n    if (theme === 'dark') {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('theme', newTheme);\r\n    \r\n    // Toggle the dark class on the html element\r\n    if (newTheme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTheme() {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}\r\n// this file is used for toggle theme", "import FormPreviewComponent from '../components/FormPreview';\r\nimport { useParams } from '@remix-run/react';\r\n\r\nexport default function FormPreviewRoute() {\r\n  const { formId } = useParams();\r\n\r\n  return (\r\n    <FormPreviewComponent formId={formId} isUserMode={false} />\r\n  );\r\n}\r\n\r\n\r\n", "import { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate, Link } from '@remix-run/react';\r\nimport { useForm, useWatch } from 'react-hook-form';\r\nimport { copyFormLink } from \"../components/helper.jsx\";\r\nimport ThemeToggle from './ThemeToggle.jsx';\r\n\r\n// Helper function to render individual form fields in preview mode\r\nconst renderFormField = (field, register, errors) => {\r\n  const { id, type, title, required, options, minLength, maxLength, pattern } = field;\r\n  const fieldName = id; // Use id as the name for form fields\r\n\r\n  const validationRules = {\r\n    required: required && \"This field is required.\",\r\n    minLength: minLength ? { value: minLength, message: `Minimum length is ${minLength} characters.` } : undefined,\r\n    maxLength: maxLength ? { value: maxLength, message: `Maximum length is ${maxLength} characters.` } : undefined,\r\n    pattern: pattern ? { value: new RegExp(pattern), message: \"Please match the required format.\" } : undefined,\r\n  };\r\n\r\n  switch (type) {\r\n    case 'short-answer':\r\n      return (\r\n        <div key={id} className=\"mb-4\">\r\n          <label htmlFor={fieldName} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n            {title} {required && <span className=\"text-red-500\">*</span>}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id={fieldName}\r\n            {...register(fieldName, validationRules)}\r\n            className={`mt-1 p-2 w-full border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors[fieldName] ? 'border-red-500' : '' } dark:bg-gray-700 dark:text-white dark:border-none`}\r\n          />\r\n          {errors[fieldName] && <p className=\"text-red-500 text-xs mt-1\">{errors[fieldName].message}</p>}\r\n        </div>\r\n      );\r\n    case 'paragraph':\r\n      return (\r\n        <div key={id} className=\"mb-4\">\r\n          <label htmlFor={fieldName} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n            {title} {required && <span className=\"text-red-500\">*</span>}\r\n          </label>\r\n          <textarea\r\n            id={fieldName}\r\n            rows=\"3\"\r\n            {...register(fieldName, validationRules)}\r\n            className={`mt-1 p-2 w-full border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors[fieldName] ? 'border-red-500' : ''} dark:bg-gray-700 dark:text-white dark:border-none`}\r\n          ></textarea>\r\n          {errors[fieldName] && <p className=\"text-red-500 text-xs mt-1\">{errors[fieldName].message}</p>}\r\n        </div>\r\n      );\r\n    case 'multiple-choice':\r\n    case 'radio':\r\n      return (\r\n        <div key={id} className=\"mb-4\">\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-2 dark:text-gray-300\">\r\n            {title} {required && <span className=\"text-red-500\">*</span>}\r\n          </label>\r\n          {options.map(option => (\r\n            <div key={`${id}-${option.id}`} className=\"flex items-center mb-1\">\r\n              <input\r\n                type=\"radio\"\r\n                id={`${fieldName}-${option.id}`}\r\n                value={option.text}\r\n                {...register(fieldName, { required: required && \"Please select an option.\" })}\r\n                className=\"focus:ring-blue-500 h-4 w-4 text-blue-600  dark:bg-gray-700 dark:text-white rounded\"\r\n              />\r\n              <label htmlFor={`${fieldName}-${option.id}`} className=\"ml-2 block text-sm text-gray-900 dark:text-gray-300\">\r\n                {option.text}\r\n              </label>\r\n            </div>\r\n          ))}\r\n          {errors[fieldName] && <p className=\"text-red-500 text-xs mt-1\">{errors[fieldName].message}</p>}\r\n        </div>\r\n      );\r\n    case 'checkboxes':\r\n      return (\r\n        <div key={id} className=\"mb-4\">\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-2 dark:text-gray-300\">\r\n            {title} {required && <span className=\"text-red-500\">*</span>}\r\n          </label>\r\n          {options.map(option => (\r\n            <div key={`${id}-${option.id}`} className=\"flex items-center mb-1\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`${fieldName}-${option.id}`}\r\n                value={option.text}\r\n                {...register(fieldName, {\r\n                  validate: required ? (value) => {\r\n                    const isAnyChecked = Array.isArray(value) && value.length > 0;\r\n                    return isAnyChecked || \"Please select at least one option.\";\r\n                  } : undefined\r\n                })}\r\n                className=\"focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded dark:bg-gray-700 dark:text-white\"\r\n              />\r\n              <label htmlFor={`${fieldName}-${option.id}`} className=\"ml-2 block text-sm text-gray-900 dark:text-gray-300\">\r\n                {option.text}\r\n              </label>\r\n            </div>\r\n          ))}\r\n          {errors[fieldName] && <p className=\"text-red-500 text-xs mt-1\">{errors[fieldName].message}</p>}\r\n        </div>\r\n      );\r\n    case 'dropdown':\r\n      return (\r\n        <div key={id} className=\"mb-4\">\r\n          <label htmlFor={fieldName} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n            {title} {required && <span className=\"text-red-500\">*</span>}\r\n          </label>\r\n          <select\r\n            id={fieldName}\r\n            {...register(fieldName, validationRules)}\r\n            className={`mt-1 p-2 w-full border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors[fieldName] ? 'border-red-500' : 'border-gray-300'} dark:bg-gray-700 dark:text-white dark:border-none`}\r\n          >\r\n            <option value=\"\">Select an option</option>\r\n            {options.map(option => (\r\n              <option key={`${id}-${option.id}`} value={option.text}>\r\n                {option.text}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {errors[fieldName] && <p className=\"text-red-500 text-xs mt-1\">{errors[fieldName].message}</p>}\r\n        </div>\r\n      );\r\n    case 'date':\r\n      return (\r\n        <div key={id} className=\"mb-4\">\r\n          <label htmlFor={fieldName} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n            {title} {required && <span className=\"text-red-500\">*</span>}\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            id={fieldName}\r\n            {...register(fieldName, validationRules)}\r\n            className={`mt-1 p-2 w-full border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors[fieldName] ? 'border-red-500' : 'border-gray-300'} dark:bg-gray-700 dark:text-white dark:border-none`}\r\n          />\r\n          {errors[fieldName] && <p className=\"text-red-500 text-xs mt-1\">{errors[fieldName].message}</p>}\r\n        </div>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\n\r\nexport default function FormPreview({ formId: propFormId, isUserMode = false }) {\r\n  const formId = propFormId;// Use prop or URL param\r\n  const navigate = useNavigate();\r\n  const [form, setForm] = useState(null);\r\n  const [previewWidth, setPreviewWidth] = useState('w-full lg:max-w-3xl'); // Default to desktop-like width\r\n  const [showCopyNotification, setShowCopyNotification] = useState(false);\r\n  const [progress, setProgress] = useState(0); // Progress state for form completion\r\n  // Initialize react-hook-form with defaultValues\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    control,\r\n    getValues,\r\n    reset,\r\n  } = useForm({\r\n    mode: 'onChange',\r\n    defaultValues: {\r\n      previewEmailField: '',\r\n    },\r\n    shouldUnregister: true // This helps with hydration by cleaning up unmounted fields\r\n  });\r\n\r\n  // Watch all form values for changes to update progress\r\n  const formValues = useWatch({\r\n    control,\r\n    defaultValue: {}\r\n  });\r\n\r\n  // Calculate form completion progress\r\n  useEffect(() => {\r\n    if (!form) return;\r\n\r\n    // Get all form fields including the required email field\r\n    const allFields = [\r\n      { name: 'previewEmailField', required: true }\r\n    ];\r\n\r\n    form.fields.forEach(field => {\r\n        allFields.push({\r\n            name: field.id,\r\n            required: field.required,\r\n            minLength: field.minLength,\r\n            maxLength: field.maxLength,\r\n            pattern: field.pattern,\r\n            type: field.type,\r\n        });\r\n    });\r\n\r\n    // Count total fields and valid fields according to requirements\r\n    let validFieldCount = 0;\r\n    let totalFieldCount = 0;\r\n\r\n    allFields.forEach(field => {\r\n      const fieldValue = getValues(field.name);\r\n      const hasValue = Array.isArray(fieldValue)\r\n        ? fieldValue.length > 0\r\n        : fieldValue !== null && fieldValue !== undefined && fieldValue !== '';\r\n\r\n      // Check if field has validation errors\r\n      const hasError = errors[field.name] !== undefined;\r\n\r\n      // Check field validity based on validation rules\r\n      let isValid = true;\r\n      if (hasValue) {\r\n        // Check minLength validation for text fields\r\n        if (field.minLength && typeof fieldValue === 'string' && fieldValue.length < field.minLength) {\r\n          isValid = false;\r\n        }\r\n\r\n        // Check maxLength validation for text fields\r\n        if (field.maxLength && typeof fieldValue === 'string' && fieldValue.length > field.maxLength) {\r\n          isValid = false;\r\n        }\r\n\r\n        // Check pattern validation for text fields\r\n        if (field.pattern && typeof fieldValue === 'string') {\r\n          try {\r\n            const regex = new RegExp(field.pattern);\r\n            if (!regex.test(fieldValue)) {\r\n              isValid = false;\r\n            }\r\n          } catch (e) {\r\n            // If regex is invalid, consider the field invalid\r\n            isValid = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Required fields are always counted in the total\r\n      if (field.required) {\r\n        totalFieldCount++;\r\n        // Count as valid only if it has a value AND passes validation AND no errors reported by React Hook Form\r\n        if (hasValue && isValid && !hasError) {\r\n          validFieldCount++;\r\n        }\r\n      }\r\n      // Optional fields are only counted in the total if they have any value\r\n      else if (hasValue) {\r\n        totalFieldCount++;\r\n        // Count as valid only if it passes validation AND no errors reported by React Hook Form\r\n        if (isValid && !hasError) {\r\n          validFieldCount++;\r\n        }\r\n      }\r\n      // Empty optional fields are not counted at all\r\n    });\r\n\r\n    // Calculate percentage (avoid division by zero)\r\n    let calculatedProgress = totalFieldCount === 0\r\n      ? 0\r\n      : Math.round((validFieldCount / totalFieldCount) * 100);\r\n\r\n    // Special case for scenario 5: If email is invalid and any field has error, set to 0%\r\n    if (errors.previewEmailField && Object.keys(errors).length > 1) {\r\n      calculatedProgress = 0;\r\n    }\r\n\r\n    setProgress(calculatedProgress);\r\n  }, [form, formValues, errors, getValues]);\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && formId) {\r\n      const storedForms = JSON.parse(localStorage.getItem('forms') || '[]');\r\n      const foundForm = storedForms.find(f => f.id === formId);\r\n      if (foundForm) {\r\n        setForm(foundForm);\r\n        const defaultValues = {\r\n          previewEmailField: '', // Initialize email field\r\n        };\r\n        foundForm.fields.forEach(field => {\r\n          // IMPORTANT: Checkboxes need to be initialized as an empty array for react-hook-form\r\n          // if they are meant to collect multiple values.\r\n          if (field.type === 'checkboxes') {\r\n            defaultValues[field.id] = [];\r\n          } else {\r\n            defaultValues[field.id] = '';\r\n          }\r\n        });\r\n        if (reset) {\r\n          reset(defaultValues);\r\n        }\r\n      } else {\r\n        console.warn(`Form with ID ${formId} not found for preview.`);\r\n        navigate('/');\r\n      }\r\n    }\r\n  }, [formId, navigate, reset]);\r\n\r\n  const onSubmit = (data) => {\r\n    console.log('Form Submitted!', data);\r\n    alert('Form submitted successfully! Check console for data.');\r\n    // Here you would typically send the form data to a backend\r\n  };\r\n\r\n  if (!form) {\r\n    return <div className=\"text-center p-8 text-gray-600\">Loading form or form not found...</div>;\r\n  }\r\n\r\n  return (   \r\n     <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 p-8\">\r\n      <ThemeToggle />\r\n      <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\r\n        {!isUserMode && (\r\n          <div className=\"flex space-x-2\">\r\n            <Link\r\n              to={`/edit-form/${form?.id}`}\r\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\"\r\n            >\r\n              &larr; Back to Editor\r\n            </Link>\r\n            <button\r\n              onClick={() => copyFormLink(form?.id, setShowCopyNotification)}\r\n              className=\"relative px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center\"\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\r\n              </svg>\r\n              Copy Share Link\r\n              {showCopyNotification && (\r\n                <span className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded\">\r\n                  Link copied!\r\n                </span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>      <div className={`mx-auto bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg transition-all duration-300 ${previewWidth}`}>\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white text-center sm:text-left\">{form?.title || 'Loading...'}</h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6\">{form.description}</p>\r\n\r\n        {/* Form Completion Progress Bar */}\r\n        <div className=\"mb-8\">          <div className=\"flex justify-between items-center mb-2\">\r\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Form Completion</span>\r\n            <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">{progress}%</span>\r\n          </div>\r\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n            <div\r\n              className={`h-2.5 rounded-full transition-all duration-500 ease-out ${progress === 100\r\n                  ? 'bg-green-600'\r\n                  : progress > 70\r\n                    ? 'bg-blue-600'\r\n                    : progress > 30\r\n                      ? 'bg-yellow-400'\r\n                      : 'bg-red-400'\r\n                }`}\r\n              style={{ width: `${progress}%` }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Content */}\r\n        {!form ? (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\r\n            <p className=\"mt-4 text-gray-600\">Loading form...</p>\r\n          </div>\r\n        ) : (\r\n          <form onSubmit={handleSubmit(onSubmit)} key={form.id}>\r\n            {/* Email field */}\r\n            <div className=\"mb-6\">\r\n              <label htmlFor=\"previewEmailField\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                Email <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"previewEmailField\"\r\n                {...register(\"previewEmailField\", {\r\n                  required: \"Email is required.\",\r\n                  pattern: {\r\n                    value: /^\\S+@\\S+\\.\\S+$/,\r\n                    message: \"Please enter a valid email address.\",\r\n                  },\r\n                })}\r\n                className={`mt-1 p-2 w-full border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.previewEmailField ? 'border-red-500' : 'border-gray-300'} dark:border-gray-600 dark:focus:ring-blue-500 dark:bg-gray-700 dark:text-white\r\n                  }`}\r\n                placeholder=\"Valid email address\"\r\n              />\r\n              {errors.previewEmailField && (\r\n                <p className=\"text-red-500 text-xs mt-1\">{errors.previewEmailField.message}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Form fields */}\r\n            <div className=\"space-y-6\">\r\n              {form.fields?.map((field) => (\r\n                <div key={field.id}>{renderFormField(field, register, errors)}</div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Submit button */}\r\n            <button\r\n              type=\"submit\"\r\n              className=\"mt-8 px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors font-semibold w-full sm:w-auto\"\r\n            >\r\n              Submit Form\r\n            </button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "// Helper function to copy form link to clipboard\r\nexport const copyFormLink = (formId, setCopiedId) => {\r\n    const formUrl = `${window.location.origin}/form/${formId}`;\r\n    navigator.clipboard.writeText(formUrl)\r\n        .then(() => {\r\n            setCopiedId(formId);\r\n            // Reset the copied state after 3 seconds\r\n            setTimeout(() => {\r\n                setCopiedId(null);\r\n            }, 3000);\r\n        })\r\n        .catch(err => {\r\n            console.error('Failed to copy form link:', err);\r\n            alert('Failed to copy link to clipboard');\r\n        });\r\n};", "import { useTheme } from '../context/ThemeContext';\r\n\r\nexport default function ThemeToggle() {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <button\r\n      onClick={toggleTheme}\r\n      className=\"fixed top-4 right-4 z-50 p-3 rounded-full bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300\"\r\n      aria-label=\"Toggle theme\"\r\n    >\r\n      {theme === 'dark' ? (\r\n        // Sun icon for dark mode\r\n        <svg className=\"w-6 h-6 text-yellow-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" />\r\n        </svg>\r\n      ) : (\r\n        // Moon icon for light mode\r\n        <svg className=\"w-6 h-6 text-gray-700\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" />\r\n        </svg>\r\n      )}\r\n    </button>\r\n  );\r\n}", "import FormBuilder from '../components/FormBuilder.jsx';\r\nimport { useParams } from '@remix-run/react';\r\nimport ThemeToggle from '../components/ThemeToggle.jsx';\r\n\r\nfunction EditFormPage() {\r\n  const { formId } = useParams();\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors\">\r\n      <ThemeToggle />\r\n      {/* The FormBuilder will receive the formId from the URL */}\r\n      <FormBuilder formId={formId} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditFormPage;", "import { useEffect, useRef } from 'react';\r\nimport { useNavigate, useParams } from '@remix-run/react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ThemeToggle from './ThemeToggle';\r\nimport FieldTypes from './FieldTypes';\r\nimport FormCanvas from './FormCanvas';\r\nimport {\r\n  setInitialForm,\r\n  updateFormDetails,\r\n  addQuestion,\r\n  removeQuestion,\r\n  updateQuestion,\r\n  reorderQuestions,\r\n} from '../store/formSlice.js';\r\nimport { formTemplates } from '../data/formTemplates';\r\n\r\n// Accept formId as a prop, with a fallback to useParams if not provided\r\nfunction FormBuilder({ formId: propFormId }) {\r\n  const formTitle = useSelector((state) => state.form.title);\r\n  const formDescription = useSelector((state) => state.form.description);\r\n  const questions = useSelector((state) => state.form.questions);\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  // Use propFormId if available, otherwise get from useParams\r\n  const params = useParams();\r\n  const currentFormId = propFormId || params.formId;\r\n\r\n\r\n  const dragItem = useRef(null);\r\n  const dragOverItem = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (currentFormId) {\r\n      const forms = JSON.parse(localStorage.getItem('forms') || '[]');\r\n      const existingForm = forms.find(form => form.id === currentFormId);\r\n      if (existingForm) {\r\n        // If it's a template-based form and we're loading it for the first time,\r\n        // make sure we have all the template questions\r\n        if (existingForm.isTemplate && existingForm.originalTemplate) {\r\n          const template = formTemplates[existingForm.originalTemplate];\r\n          if (template) {\r\n            // Ensure all template questions exist\r\n            const templateQuestionIds = template.fields.map(f => f.id);\r\n            const existingQuestionIds = existingForm.fields.map(f => f.id);\r\n            const missingTemplateQuestions = template.fields.filter(\r\n              f => !existingQuestionIds.includes(f.id)\r\n            );\r\n            \r\n            // Add any missing template questions at the beginning\r\n            if (missingTemplateQuestions.length > 0) {\r\n              existingForm.fields = [...missingTemplateQuestions, ...existingForm.fields];\r\n            }\r\n          }\r\n        }\r\n        dispatch(setInitialForm(existingForm));\r\n      } else {\r\n        console.warn(`Form with ID ${currentFormId} not found. Navigating to new form.`);\r\n        navigate('/form-builder');\r\n      }\r\n    } else {\r\n      dispatch(setInitialForm({ title: 'Untitled form', description: '', fields: [] }));\r\n    }\r\n  }, [currentFormId, navigate, dispatch]);\r\n\r\n\r\n  const handleCanvasDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleCanvasDrop = (e) => {\r\n    e.preventDefault();\r\n    const fieldType = e.dataTransfer.getData('fieldType');\r\n    if (fieldType) {\r\n      dispatch(addQuestion({\r\n        id: `q-${Date.now()}-${Math.random()}`,\r\n        title: 'Untitled Question',\r\n        type: fieldType,\r\n        required: false,\r\n        options: (fieldType === 'multiple-choice' || fieldType === 'checkboxes' || fieldType === 'dropdown' || fieldType === 'radio')\r\n          ? [{ id: `opt-${Date.now()}-1`, text: 'Option 1' }]\r\n          : [],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleQuestionDragStart = (e, index) => {\r\n    dragItem.current = index;\r\n    e.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n\r\n  const handleQuestionDragOver = (e, index) => {\r\n    e.preventDefault();\r\n    dragOverItem.current = index;\r\n  };\r\n\r\n  const handleQuestionDrop = (e, dropIndex) => {\r\n    e.preventDefault();\r\n    const draggedIndex = dragItem.current;\r\n    const droppedOverIndex = dragOverItem.current;\r\n\r\n    if (draggedIndex !== null && droppedOverIndex !== null && draggedIndex !== droppedOverIndex) {\r\n      dispatch(reorderQuestions({ draggedIndex, droppedOverIndex }));\r\n      dragItem.current = null;\r\n      dragOverItem.current = null;\r\n    }\r\n  };\r\n\r\n  const saveFormToStorage = () => {\r\n    try {\r\n      let forms = JSON.parse(localStorage.getItem('forms') || '[]');\r\n      const currentForm = forms.find(f => f.id === currentFormId);\r\n\r\n      const currentFormData = {\r\n        title: formTitle,\r\n        description: formDescription,\r\n        fields: questions,\r\n      };\r\n\r\n      let newFormId = currentFormId;\r\n\r\n      if (currentFormId) {\r\n        const formIndex = forms.findIndex(form => form.id === currentFormId);\r\n        if (formIndex > -1) {\r\n          // Preserve template status and original template reference\r\n          forms[formIndex] = {\r\n            ...forms[formIndex],\r\n            ...currentFormData,\r\n            updatedAt: new Date().toISOString(),\r\n            // If it was a template form, ensure template questions remain\r\n            fields: currentForm?.isTemplate\r\n              ? ensureTemplateQuestions(currentFormData.fields, forms[formIndex].originalTemplate)\r\n              : currentFormData.fields,\r\n          };\r\n          console.log('Form updated successfully!');\r\n        } else {\r\n          console.warn('Form not found for update, creating new one.');\r\n          newFormId = `form-${Date.now()}`;\r\n          forms.push({\r\n            ...currentFormData,\r\n            id: newFormId,\r\n            createdAt: new Date().toISOString()\r\n          });\r\n          console.log('New form created as fallback!');\r\n        }\r\n      } else {\r\n        newFormId = `form-${Date.now()}`;\r\n        forms.push({\r\n          ...currentFormData,\r\n          id: newFormId,\r\n          createdAt: new Date().toISOString()\r\n        });\r\n        console.log('New form saved successfully!');\r\n      }\r\n\r\n      localStorage.setItem('forms', JSON.stringify(forms));\r\n      return { success: true, formId: newFormId };\r\n    } catch (error) {\r\n      console.error('Error saving form:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const handleSaveForm = () => {\r\n    const result = saveFormToStorage();\r\n    if (result.success) {\r\n      navigate('/');\r\n    } else {\r\n      console.error('Failed to save form:', result.error);\r\n    }\r\n  };\r\n\r\n  const handlePreview=()=>  {\r\n    const result = saveFormToStorage();\r\n    if (result.success) {\r\n      navigate(`/form-preview/${result.formId}`);\r\n    } else {\r\n      console.error('Failed to save form:', result.error);\r\n    }\r\n  }\r\n\r\n  // Helper function to ensure template questions are preserved\r\n  const ensureTemplateQuestions = (currentFields, templateType) => {\r\n    if (!templateType) return currentFields;\r\n    \r\n    const template = formTemplates[templateType];\r\n    if (!template) return currentFields;\r\n\r\n    // Get template question IDs\r\n    const templateQuestionIds = template.fields.map(f => f.id);\r\n    \r\n    // Filter out any existing template questions that were modified\r\n    const modifiedTemplateQuestions = currentFields.filter(\r\n      f => templateQuestionIds.includes(f.id)\r\n    );\r\n\r\n    // Get template questions that weren't modified\r\n    const unmodifiedTemplateQuestions = template.fields.filter(\r\n      f => !modifiedTemplateQuestions.find(mf => mf.id === f.id)\r\n    );\r\n\r\n    // Combine unmodified template questions with all current fields\r\n    return [...unmodifiedTemplateQuestions, ...currentFields];\r\n  };\r\n\r\n  const handleAddField = (fieldType) => {\r\n    dispatch(addQuestion({\r\n      id: `q-${Date.now()}-${Math.random()}`,\r\n      title: 'Untitled Question',\r\n      type: fieldType,\r\n      required: false,\r\n      options: (fieldType === 'multiple-choice' || fieldType === 'checkboxes' || fieldType === 'dropdown' || fieldType === 'radio')\r\n        ? [{ id: `opt-${Date.now()}-1`, text: 'Option 1' }]\r\n        : [],\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-800 transition-colors\">\r\n    <div className=\"container mx-auto px-4 py-8 dark:bg-gray-900 transition-colors\">\r\n      <ThemeToggle />\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\r\n        {/* Field Types Section */}\r\n        <div className=\"md:col-span-1\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 transition-colors\">\r\n            <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white transition-colors\">Form Elements</h2>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4 md:hidden\">\r\n              Tap a field type to add it to your form\r\n            </p>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4 hidden md:block\">\r\n              Drag and drop fields to add them to your form\r\n            </p>\r\n            <FieldTypes onAddField={handleAddField} />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Form Canvas Section */}\r\n        <div className=\"md:col-span-3\">\r\n          <div \r\n            className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 min-h-[600px] transition-colors\"\r\n            onDragOver={handleCanvasDragOver}\r\n            onDrop={handleCanvasDrop}\r\n          >\r\n            {/* Form Title Input */}\r\n            <input\r\n              type=\"text\"\r\n              value={formTitle}\r\n              onChange={(e) => dispatch(updateFormDetails({ title: e.target.value }))}\r\n              placeholder=\"Form Title\"\r\n              className=\"w-full text-3xl font-bold mb-4 p-2 border-b-2 border-transparent focus:border-blue-500 focus:outline-none bg-transparent dark:text-white transition-colors\"\r\n            />\r\n\r\n            {/* Form Description Input */}\r\n            <textarea\r\n              value={formDescription}\r\n              onChange={(e) => dispatch(updateFormDetails({ description: e.target.value }))}\r\n              placeholder=\"Form Description\"\r\n              className=\"w-full text-gray-600  mb-8 p-2 border-b-2 border-transparent focus:border-blue-500 focus:outline-none bg-transparent resize-none transition-colors dark:text-white\"\r\n              rows=\"2\"\r\n            />\r\n\r\n            {/* Form Canvas for Questions */}\r\n            <FormCanvas\r\n              questions={questions}\r\n              onQuestionDragStart={handleQuestionDragStart}\r\n              onQuestionDragOver={handleQuestionDragOver}\r\n              onQuestionDrop={handleQuestionDrop}\r\n              onUpdateQuestion={(id, updates) => dispatch(updateQuestion({ id, updates }))}\r\n              onRemoveQuestion={(id) => dispatch(removeQuestion(id))}\r\n            />\r\n\r\n            {/* Save and Preview Buttons */}\r\n            <div className=\"flex justify-end space-x-4 mt-8\">\r\n              <button\r\n                onClick={handleSaveForm}\r\n                className=\"px-6 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors\"\r\n              >\r\n                Save Form\r\n              </button>\r\n              <button\r\n                onClick={handlePreview}\r\n                className=\"px-6 py-2 bg-green-600 dark:bg-green-500 text-white rounded-lg hover:bg-green-700 dark:hover:bg-green-600 transition-colors\"\r\n              >\r\n                Preview\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormBuilder;\r\n// Note: Ensure that the Redux store and actions are correctly set up in your application.\r\n// This code assumes you have a Redux store set up with the necessary actions and reducers.\r\n\r\n", "import React from 'react';\r\n\r\n// Define available question types for the dropdown (can be imported from a central place later)\r\nexport const questionTypes = [\r\n  { id: 'short-answer', label: 'Short answer' },\r\n  { id: 'paragraph', label: 'Paragraph' },\r\n  { id: 'multiple-choice', label: 'Multiple Choice' },\r\n  { id: 'checkboxes', label: 'Checkboxes' },\r\n  { id: 'dropdown', label: 'Drop-down' },\r\n  { id: 'date', label: 'Date' },\r\n  { id: 'radio', label: 'Radio' },\r\n];\r\n\r\nfunction QuestionHeader({ title, type, onTitleChange, onTypeChange, onRemove }) {\r\n  return (\r\n    <div className=\"flex items-start justify-between mb-4\">\r\n      <div className=\"flex-1 mr-4\">\r\n        {/* Question Title Input */}\r\n        <input\r\n          type=\"text\"          value={title || ''}\r\n          onChange={onTitleChange}\r\n          placeholder=\"Question Title\"\r\n          className=\"w-full text-lg font-semibold mb-2 p-2 border-b-2 border-transparent focus:border-blue-500 focus:outline-none bg-transparent dark:text-white transition-colors\"\r\n        />\r\n\r\n        {/* Question Type Selector */}\r\n        <select\r\n          value={type}\r\n          onChange={onTypeChange}\r\n          className=\"text-sm px-3 py-1.5 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors\"\r\n        >\r\n          {questionTypes.map((questionType) => (\r\n            <option key={questionType.id} value={questionType.id}>\r\n              {questionType.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionHeader;", "import { questionTypes } from \"./Question/QuestionHeader\"; \r\n\r\nfunction FieldTypes({ onAddField }) {\r\n  const handleDragStart = (e, typeId) => {\r\n    e.dataTransfer.setData('fieldType', typeId);\r\n  };\r\n\r\n  const handleClick = (typeId) => {\r\n    onAddField(typeId);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {questionTypes.map((type) => (\r\n        <div\r\n          key={type.id}\r\n          draggable\r\n          className=\"bg-blue-100 dark:bg-blue-900 hover:bg-blue-200 dark:hover:bg-blue-800 \r\n                     text-blue-800 dark:text-blue-100 font-semibold py-2 px-4 rounded-md mb-2 \r\n                     cursor-pointer transition-colors shadow-sm hover:shadow-md\r\n                     flex justify-between items-center\"\r\n          onDragStart={(e) => handleDragStart(e, type.id)}\r\n          onClick={() => handleClick(type.id)}\r\n        >\r\n          <span>{type.label}</span>\r\n          <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            className=\"h-5 w-5 ml-2 md:hidden\" \r\n            fill=\"none\" \r\n            viewBox=\"0 0 24 24\" \r\n            stroke=\"currentColor\"\r\n          >\r\n            <path \r\n              strokeLinecap=\"round\" \r\n              strokeLinejoin=\"round\" \r\n              strokeWidth={2} \r\n              d=\"M12 4v16m8-8H4\" \r\n            />\r\n          </svg>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FieldTypes;\r\n// This component renders a list of field types that can be dragged and dropped into a form.\r\n// Each field type is represented by a div that is styled and has a drag-and-drop functionality.", "import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'; // Import Redux hooks\r\nimport QuestionComponent from './QuestionComponent';\r\n\r\n// Import the reorderQuestions action\r\nimport { reorderQuestions } from '../store/formSlice';\r\n\r\nfunction FormCanvas({\r\n  onDragOver, // Still needed for dropping new field types from sidebar\r\n  onDrop,     // Still needed for dropping new field types from sidebar\r\n  onQuestionDragStart, // Passed from FormBuilder for reordering\r\n  onQuestionDragOver,  // Passed from FormBuilder for reordering\r\n  onQuestionDrop       // Passed from FormBuilder for reordering\r\n}) {\r\n  // Select questions array directly from Redux store\r\n  const questions = useSelector((state) => state.form.questions);\r\n\r\n  return (\r\n    <div\r\n      className=\"min-h-96 border-2 border-dashed border-gray-300 rounded-lg p-4 bg-gray-50\"\r\n      onDragOver={onDragOver} // For new field types from sidebar\r\n      onDrop={onDrop}         // For new field types from sidebar\r\n    >\r\n      {questions.length === 0 ? (\r\n        <p className=\"text-gray-500 text-center py-10\">Drag and drop form fields here to add questions</p>\r\n      ) : (\r\n        questions.map((question, index) => (\r\n          <QuestionComponent\r\n            key={question.id}\r\n            questionId={question.id} // Pass only the questionId, QuestionComponent will fetch its own data\r\n            index={index} // Pass the current index for reordering\r\n            onDragStart={onQuestionDragStart} // Pass the reordering drag start handler\r\n            onDragOver={onQuestionDragOver}   // Pass the reordering drag over handler\r\n            onDrop={onQuestionDrop}           // Pass the reordering drop handler\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormCanvas;", "import { useSelector , useDispatch } from 'react-redux';\r\nimport { IoMoveOutline } from 'react-icons/io5'; // IoTrashOutline moved to QuestionFooter\r\nimport { useState, useRef } from 'react';\r\n\r\n// Import new sub-components from the 'Question' folder\r\nimport QuestionHeader from './Question/QuestionHeader';\r\nimport QuestionBody from './Question/QuestionBody';\r\nimport QuestionFooter from './Question/QuestionFooter';\r\nimport ValidationRules from './Question/ValidationRules'; // Now inside the Question folder\r\n\r\n// Import actions from formSlice\r\nimport {\r\n    updateQuestion,\r\n    removeQuestion,\r\n    // addOption, removeOptionAction, updateOption are dispatched within QuestionOptions and OptionItem\r\n} from '../store/formSlice'\r\n\r\nfunction QuestionComponent({\r\n  questionId,\r\n  onDragStart,\r\n  onDragOver,\r\n  onDrop,\r\n  index\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const [isTouching, setIsTouching] = useState(false);\r\n  const touchTimeout = useRef(null);\r\n\r\n  const question = useSelector((state) => state.form.questions.find(q => q.id === questionId));\r\n\r\n  if (!question) {\r\n    return null;\r\n  }\r\n\r\n  const { id, title, type, required, options = [], minLength, maxLength, pattern } = question;\r\n\r\n  const handleTouchStart = (e) => {\r\n    e.preventDefault();\r\n    // Set a timeout to differentiate between tap and long press\r\n    touchTimeout.current = setTimeout(() => {\r\n      setIsTouching(true);\r\n    }, 500); // 500ms delay for long press\r\n  };\r\n\r\n  const handleTouchEnd = (e) => {\r\n    e.preventDefault();\r\n    clearTimeout(touchTimeout.current);\r\n    setIsTouching(false);\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    if (isTouching) {\r\n      e.preventDefault();\r\n      const touch = e.touches[0];\r\n      const elements = document.elementsFromPoint(touch.clientX, touch.clientY);\r\n      const targetQuestion = elements.find(el => el.hasAttribute('data-question-index'));\r\n      \r\n      if (targetQuestion) {\r\n        const targetIndex = parseInt(targetQuestion.getAttribute('data-question-index'));\r\n        if (targetIndex !== index) {\r\n          onDrop(e, targetIndex);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handlers to be passed down to sub-components, dispatching Redux actions\r\n  const handleTitleChange = (e) => {\r\n    dispatch(updateQuestion({ ...question, title: e.target.value }));\r\n  };\r\n\r\n  const handleTypeChange = (e) => {\r\n    const newType = e.target.value;\r\n    const newOptions = (newType === 'multiple-choice' || newType === 'checkboxes' || newType === 'dropdown' || newType === 'radio')\r\n      ? (options.length > 0 ? options : [{ id: `opt-${Date.now()}-1`, text: 'Option 1' }])\r\n      : [];\r\n    const updatedQuestion = { ...question, type: newType, options: newOptions };\r\n    // Clear validation rules that might not apply to the new type\r\n    if (newType !== 'short-answer' && newType !== 'paragraph') {\r\n      delete updatedQuestion.minLength;\r\n      delete updatedQuestion.maxLength;\r\n    }\r\n    if (newType !== 'short-answer') { // Pattern typically only for short-answer\r\n      delete updatedQuestion.pattern;\r\n    }\r\n    dispatch(updateQuestion(updatedQuestion));\r\n  };\r\n\r\n  const handleRequiredToggle = () => {\r\n    dispatch(updateQuestion({ ...question, required: !required }));\r\n  };\r\n\r\n  const handleDeleteQuestion = () => {\r\n    dispatch(removeQuestion(id));\r\n  };\r\n\r\n  const handleMinLengthChange = (e) => {\r\n    const value = e.target.value === '' ? undefined : parseInt(e.target.value, 10);\r\n    dispatch(updateQuestion({ ...question, minLength: value }));\r\n  };\r\n\r\n  const handleMaxLengthChange = (e) => {\r\n    const value = e.target.value === '' ? undefined : parseInt(e.target.value, 10);\r\n    dispatch(updateQuestion({ ...question, maxLength: value }));\r\n  };\r\n\r\n  const handlePatternChange = (e) => {\r\n    dispatch(updateQuestion({ ...question, pattern: e.target.value }));\r\n  };\r\n\r\n  const handleStandardPatternSelect = (e) => {\r\n    const selectedPattern = e.target.value;\r\n    dispatch(updateQuestion({ ...question, pattern: selectedPattern }));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-4 border border-gray-300 relative group\"\r\n      draggable\r\n      onDragStart={(e) => onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver(e, index)}\r\n      onDrop={(e) => onDrop(e, index)}\r\n      onTouchStart={handleTouchStart}\r\n      onTouchEnd={handleTouchEnd}\r\n      onTouchMove={handleTouchMove}\r\n    >\r\n      {/* Drag handle */}\r\n      <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-gray-200 rounded-full p-1 cursor-grab opacity-0 group-hover:opacity-100 transition-opacity z-10\">\r\n        <IoMoveOutline size={18} className=\"text-gray-600\" />\r\n      </div>\r\n\r\n      {/* Question Header */}\r\n      <QuestionHeader\r\n        title={title}\r\n        type={type}\r\n        onTitleChange={handleTitleChange}\r\n        onTypeChange={handleTypeChange}\r\n      />\r\n\r\n      {/* Question Body (Input fields or Options) */}\r\n      {/* QuestionBody now directly receives the question object */}\r\n      <QuestionBody question={question} />\r\n\r\n      {/* Validation Rules Section */}\r\n      <ValidationRules\r\n        type={type}\r\n        minLength={minLength}\r\n        maxLength={maxLength}\r\n        pattern={pattern}\r\n        onMinLengthChange={handleMinLengthChange}\r\n        onMaxLengthChange={handleMaxLengthChange}\r\n        onPatternChange={handlePatternChange}\r\n        onStandardPatternSelect={handleStandardPatternSelect}\r\n      />\r\n\r\n      {/* Question Footer (Required toggle and Delete button) */}\r\n      <QuestionFooter\r\n        questionId={id}\r\n        required={required}\r\n        onRequiredToggle={handleRequiredToggle}\r\n        onDeleteQuestion={handleDeleteQuestion}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionComponent;\r\n", "import React from 'react';\r\nimport QuestionOptions from './QuestionOptions';\r\n\r\nfunction QuestionBody({ question, onUpdate }) {\r\n  // For types that need options (multiple-choice, checkboxes, dropdown, radio)\r\n  const hasOptions = ['multiple-choice', 'checkboxes', 'dropdown', 'radio'].includes(question.type);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      {/* Show options component for question types that need options */}      {hasOptions ? (\r\n        <QuestionOptions\r\n          question={question}\r\n        />\r\n      ) : (\r\n        // Show placeholder input for other question types\r\n        <div className=\"mt-2\">\r\n          <input\r\n            type={question.type === 'date' ? 'date' : 'text'}\r\n            disabled\r\n            placeholder={\r\n              question.type === 'short-answer'\r\n                ? 'Short answer text'\r\n                : question.type === 'paragraph'\r\n                ? 'Long answer text'\r\n                : 'Answer'\r\n            }\r\n            className=\"w-full p-2 border border-gray-300  rounded-md bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed transition-colors\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionBody;", "import { useDispatch } from 'react-redux';\r\nimport OptionItem from '../OptionItem';\r\nimport { addOption, removeOption } from '../../store/formSlice';\r\n\r\nfunction QuestionOptions({ question }) {\r\n  const dispatch = useDispatch();\r\n  \r\n  if (!question) {\r\n    return null;\r\n  }\r\n\r\n  const { id, type, options = [] } = question;\r\n\r\n  const handleAddOption = () => {\r\n    const newOption = { id: `opt-${Date.now()}-${Math.random()}`, text: `Option ${options.length + 1}` };\r\n    dispatch(addOption({ questionId: id, newOption }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2 mt-2\">\r\n      {options.map((option) => (\r\n        <div key={option.id} className=\"flex items-center space-x-2\">\r\n          <div className=\"w-4 h-4 rounded-full border border-gray-400 dark:border-gray-500 flex-shrink-0\" />\r\n          <OptionItem\r\n            questionId={id}\r\n            optionId={option.id}\r\n            type={type}\r\n          />\r\n          <button            onClick={() => dispatch(removeOption({ questionId: id, optionIdToRemove: option.id }))}\r\n            className=\"text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 transition-colors\"\r\n            aria-label=\"Remove option\"\r\n          >\r\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      ))}\r\n      <button\r\n        onClick={handleAddOption}\r\n        className=\"mt-2 text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors\"\r\n      >\r\n        <span className=\"mr-2 text-xl\">+</span> Add option\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionOptions;", "import { useSelector, useDispatch } from 'react-redux'; // Import Redux hooks\r\n\r\n// Import actions from your formSlice\r\nimport { updateOption, removeOption } from '../store/formSlice';\r\n\r\nfunction OptionItem({ questionId, optionId, type }) { // Now receives questionId and optionId\r\n  const dispatch = useDispatch();\r\n\r\n  // Select the specific option from the Redux store based on questionId and optionId\r\n  const option = useSelector((state) => {\r\n    const question = state.form.questions.find(q => q.id === questionId);\r\n    return question ? question.options.find(opt => opt.id === optionId) : null;\r\n  });\r\n\r\n  // If option is not found (e.g., deleted by another action), render nothing\r\n  if (!option) {\r\n    return null;\r\n  }\r\n\r\n  const handleOptionTextChange = (e) => {\r\n    dispatch(updateOption({ questionId, updatedOption: { ...option, text: e.target.value } }));\r\n  };\r\n\r\n  const handleDeleteOption = () => {\r\n    dispatch(removeOption({ questionId, optionIdToRemove: option.id }));\r\n  };\r\n\r\n  // Determine the input type based on the question type\r\n  const inputType = type === 'multiple-choice' ? 'radio' : 'checkbox';\r\n\r\n  return (\r\n    <div className=\"flex items-center mb-2\">\r\n      {/* Input type (radio or checkbox) */}\r\n      <input type={inputType} className=\"mr-2 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\" disabled />\r\n\r\n      {/* Option Text Input */}\r\n      <input\r\n        type=\"text\"\r\n        className=\"flex-grow p-2 border-b border-gray-300 focus:border-blue-500 outline-none text-gray-800 mr-2\"\r\n        value={option.text}\r\n        onChange={handleOptionTextChange}\r\n        placeholder={`Option ${option.text}`}\r\n      />\r\n\r\n      {/* Delete Option Button */}\r\n      {/* Only show delete button if there's more than one option */}\r\n      {type !== 'dropdown' && type !== 'radio' && option.text !== 'Option 1' && ( // Added conditions to prevent deleting 'Option 1' or in dropdown/radio\r\n        <button\r\n          onClick={handleDeleteOption}\r\n          className=\"text-gray-500 hover:text-red-600 p-1 rounded-full hover:bg-gray-100 transition-colors\"\r\n        >\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OptionItem;", "import { IoTrashOutline } from 'react-icons/io5';\r\n\r\nfunction QuestionFooter({ questionId, required, onRequiredToggle, onDeleteQuestion }) {\r\n  return (\r\n    <div className=\"border-t border-gray-200 pt-4 flex justify-end items-center dark:border-gray-700\">\r\n      <label className=\"flex items-center cursor-pointer mr-4\">\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"form-checkbox h-5 w-5 text-blue-600 dark:text-blue-500 border-gray-300 dark:border-gray-600 rounded focus:ring-blue-500 transition-colors\"\r\n          checked={required}\r\n          onChange={onRequiredToggle}\r\n        />\r\n        <span className=\"ml-2 text-gray-700 dark:text-gray-300\">Required</span>\r\n      </label>\r\n      <button\r\n        onClick={() => onDeleteQuestion(questionId)} // Pass questionId to delete handler\r\n        className=\"text-gray-500 hover:text-red-600 p-2 rounded-full hover:bg-gray-100 transition-colors\"\r\n      >\r\n        <IoTrashOutline size={22} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionFooter;", "import React from 'react';\r\n\r\n// Define standard validation patterns (can be moved to a constants file later)\r\nconst standardPatterns = [\r\n  { label: 'None', value: '' },\r\n  { label: 'Email Address', value: '^\\\\S+@\\\\S+\\\\.\\\\S+$' },\r\n  { label: '10-digit Mobile Number (India)', value: '^[6-9]\\\\d{9}$' },\r\n];\r\n\r\nfunction ValidationRules({\r\n  type,\r\n  minLength,\r\n  maxLength,\r\n  pattern,\r\n  onMinLengthChange,\r\n  onMaxLengthChange,\r\n  onPatternChange,\r\n  onStandardPatternSelect\r\n}) {\r\n  const showLengthValidation = type === 'short-answer' || type === 'paragraph';\r\n  const showPatternValidation = type === 'short-answer';\r\n\r\n  if (!showLengthValidation && !showPatternValidation) {\r\n    return null; // Don't render if no validation rules apply\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-4 p-3 bg-gray-50 rounded-md border border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\r\n      <h4 className=\"text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300\">Validation Rules</h4>\r\n      {showLengthValidation && (\r\n        <div className=\"flex items-center mb-2\">\r\n          <label className=\"text-sm text-gray-600 dark:text-gray-400 w-24\">Min Length:</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"ml-2 w-20 p-1 border border-gray-300 dark:border-gray-600 rounded \r\n                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white \r\n                          focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors\"\r\n            value={minLength === undefined ? '' : minLength}\r\n            onChange={onMinLengthChange}\r\n            min=\"0\"\r\n          />\r\n          <label className=\"text-sm text-gray-600 dark:text-gray-400 w-24 ml-4\">Max Length:</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"ml-2 w-20 p-1 border border-gray-300 dark:border-gray-600 rounded \r\n                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white \r\n                          focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors\"\r\n            value={maxLength === undefined ? '' : maxLength}\r\n            onChange={onMaxLengthChange}\r\n            min=\"0\"\r\n          />\r\n        </div>\r\n      )}\r\n      {showPatternValidation && (\r\n        <div className=\"flex flex-col\">\r\n          <label className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">Standard Patterns:</label>\r\n          <select\r\n            className=\"block appearance-none w-full bg-white border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-white py-2 px-3 pr-8 rounded-md leading-tight focus:outline-none focus:bg-white focus:border-blue-500 mb-2\"\r\n            value={pattern || ''}\r\n            onChange={onStandardPatternSelect}\r\n          >\r\n            {standardPatterns.map((p) => (\r\n              <option key={p.label} value={p.value}>\r\n                {p.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <label className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">Custom Pattern (Regex):</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-grow p-1 border border-gray-300 dark:border-gray-600 rounded-md focus:border-blue-500 outline-none text-gray-700 dark:text-white bg-white dark:bg-gray-700\"\r\n            value={pattern || ''}\r\n            onChange={onPatternChange}\r\n            placeholder=\"e.g., ^\\\\S+@\\\\S+\\\\.\\\\S+$ for email\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ValidationRules;", "export const formTemplates = {\r\n  contact: {\r\n    id: 'template-contact',\r\n    title: 'Contact Information',\r\n    description: 'Basic contact information form template',\r\n    fields: [\r\n      {\r\n        id: 'contact-name',\r\n        title: 'Full Name',\r\n        type: 'short-answer',\r\n        required: true,\r\n      },\r\n      {\r\n        id: 'contact-email',\r\n        title: 'Email Address',\r\n        type: 'short-answer',\r\n        required: true,\r\n        pattern: '^\\\\S+@\\\\S+\\\\.\\\\S+$'\r\n      },\r\n      {\r\n        id: 'contact-phone',\r\n        title: 'Phone Number',\r\n        type: 'short-answer',\r\n        required: true,\r\n        pattern: '^[\\\\+]?[(]?[0-9]{3}[)]?[-\\\\s\\\\.]?[0-9]{3}[-\\\\s\\\\.]?[0-9]{4,6}$'\r\n      },\r\n      {\r\n        id: 'contact-address',\r\n        title: 'Address',\r\n        type: 'paragraph',\r\n        required: false,\r\n      },\r\n      {\r\n        id: 'contact-preferred',\r\n        title: 'Preferred Contact Method',\r\n        type: 'radio',\r\n        required: true,\r\n        options: [\r\n          { id: 'contact-pref-1', text: 'Email' },\r\n          { id: 'contact-pref-2', text: 'Phone' },\r\n          { id: 'contact-pref-3', text: 'Text Message' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  rsvp: {\r\n    id: 'template-rsvp',\r\n    title: 'RSVP Form',\r\n    description: 'Event response and details collection form',\r\n    fields: [\r\n      {\r\n        id: 'rsvp-name',\r\n        title: 'Your Name',\r\n        type: 'short-answer',\r\n        required: true,\r\n      },\r\n      {\r\n        id: 'rsvp-email',\r\n        title: 'Email Address',\r\n        type: 'short-answer',\r\n        required: true,\r\n        pattern: '^\\\\S+@\\\\S+\\\\.\\\\S+$'\r\n      },\r\n      {\r\n        id: 'rsvp-attendance',\r\n        title: 'Will you be attending?',\r\n        type: 'radio',\r\n        required: true,\r\n        options: [\r\n          { id: 'rsvp-att-1', text: 'Yes, I will attend' },\r\n          { id: 'rsvp-att-2', text: 'No, I cannot attend' },\r\n          { id: 'rsvp-att-3', text: 'Maybe' }\r\n        ]\r\n      },\r\n      {\r\n        id: 'rsvp-guests',\r\n        title: 'Number of Additional Guests',\r\n        type: 'dropdown',\r\n        required: true,\r\n        options: [\r\n          { id: 'rsvp-guest-0', text: '0' },\r\n          { id: 'rsvp-guest-1', text: '1' },\r\n          { id: 'rsvp-guest-2', text: '2' },\r\n          { id: 'rsvp-guest-3', text: '3' },\r\n          { id: 'rsvp-guest-4', text: '4' }\r\n        ]\r\n      },\r\n      {\r\n        id: 'rsvp-dietary',\r\n        title: 'Dietary Restrictions',\r\n        type: 'checkboxes',\r\n        required: false,\r\n        options: [\r\n          { id: 'rsvp-diet-1', text: 'Vegetarian' },\r\n          { id: 'rsvp-diet-2', text: 'Vegan' },\r\n          { id: 'rsvp-diet-3', text: 'Gluten-free' },\r\n          { id: 'rsvp-diet-4', text: 'Dairy-free' },\r\n          { id: 'rsvp-diet-5', text: 'Nut allergy' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  partyInvite: {\r\n    id: 'template-party',\r\n    title: 'Party Invitation Response',\r\n    description: 'Party planning and guest information collection',\r\n    fields: [\r\n      {\r\n        id: 'party-name',\r\n        title: 'Guest Name',\r\n        type: 'short-answer',\r\n        required: true,\r\n      },\r\n      {\r\n        id: 'party-email',\r\n        title: 'Email Address',\r\n        type: 'short-answer',\r\n        required: true,\r\n        pattern: '^\\\\S+@\\\\S+\\\\.\\\\S+$'\r\n      },\r\n      {\r\n        id: 'party-attendance',\r\n        title: 'Attendance Response',\r\n        type: 'radio',\r\n        required: true,\r\n        options: [\r\n          { id: 'party-att-1', text: 'Count me in!' },\r\n          { id: 'party-att-2', text: 'Sorry, can\\'t make it' }\r\n        ]\r\n      },\r\n      {\r\n        id: 'party-bringing',\r\n        title: 'What are you bringing?',\r\n        type: 'dropdown',\r\n        required: true,\r\n        options: [\r\n          { id: 'party-bring-1', text: 'Appetizer' },\r\n          { id: 'party-bring-2', text: 'Main Dish' },\r\n          { id: 'party-bring-3', text: 'Dessert' },\r\n          { id: 'party-bring-4', text: 'Beverages' },\r\n          { id: 'party-bring-5', text: 'Nothing - I\\'ll help in other ways!' }\r\n        ]\r\n      },\r\n      {\r\n        id: 'party-activities',\r\n        title: 'Which activities interest you?',\r\n        type: 'checkboxes',\r\n        required: false,\r\n        options: [\r\n          { id: 'party-act-1', text: 'Dancing' },\r\n          { id: 'party-act-2', text: 'Party Games' },\r\n          { id: 'party-act-3', text: 'Karaoke' },\r\n          { id: 'party-act-4', text: 'Board Games' }\r\n        ]\r\n      },\r\n      {\r\n        id: 'party-song',\r\n        title: 'Song Request',\r\n        type: 'short-answer',\r\n        required: false,\r\n      }\r\n    ]\r\n  }\r\n};\r\n", "     import FormBuilder from '../components/FormBuilder.jsx'; // Adjust the import path as necessary\r\n\r\n    function FormBuilderPage() {\r\n      return (\r\n        <div className=\"min-h-screen bg-gray-100\">\r\n          <FormBuilder />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    export default FormBuilderPage;", "import { useParams } from '@remix-run/react';\r\nimport FormPreview from '../components/FormPreview.jsx'; // Adjust the import path as necessary\r\n\r\nexport default function FormRoute() {\r\n  const { formId } = useParams();\r\n\r\n  return (\r\n    <FormPreview formId={formId} isUserMode={true} />\r\n  );\r\n}", "import { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from '@remix-run/react';\r\nimport { copyFormLink } from '../components/helper.jsx';\r\nimport ThemeToggle from '../components/ThemeToggle.jsx';\r\nimport { formTemplates } from '../data/formTemplates';\r\n\r\nexport default function Index() {\r\n  const [forms, setForms] = useState([]);\r\n  const [copiedId, setCopiedId] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Load forms from localStorage when component mounts\r\n    const storedForms = JSON.parse(localStorage.getItem('forms') || '[]');\r\n    setForms(storedForms);\r\n  }, []);\r\n\r\n  // Handle form deletion\r\n  const handleDeleteForm = (formId) => {\r\n    if (window.confirm('Are you sure you want to delete this form?')) {\r\n      // Remove from localStorage\r\n      const storedForms = JSON.parse(localStorage.getItem('forms') || '[]');\r\n      const updatedForms = storedForms.filter(form => form.id !== formId);\r\n      localStorage.setItem('forms', JSON.stringify(updatedForms));\r\n      \r\n      // Update state to reflect changes\r\n      setForms(updatedForms);\r\n    }\r\n  };\r\n\r\n  // Reverted: This function now creates a new form and navigates to its edit page\r\n  const handleCreateNewForm = () => {\r\n    navigate('/form-builder');\r\n  };\r\n\r\n  const handleTemplateSelect = (templateType) => {\r\n    const template = formTemplates[templateType];\r\n    if (!template) return;\r\n\r\n    // Create a new form based on the template\r\n    const newForm = {\r\n      ...template,\r\n      id: `form-${Date.now()}`,\r\n      createdAt: new Date().toISOString(),\r\n      isTemplate: true, // Flag to identify template-based forms\r\n      originalTemplate: templateType // Store the template type for future reference\r\n    };\r\n\r\n    // Save the new form\r\n    const storedForms = JSON.parse(localStorage.getItem('forms') || '[]');\r\n    localStorage.setItem('forms', JSON.stringify([...storedForms, newForm]));\r\n\r\n    // Navigate to the form editor\r\n    navigate(`/edit-form/${newForm.id}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-800 p-8 text-gray-900 dark:text-gray-300\">\r\n      <ThemeToggle />\r\n      <header className=\"mb-10\">\r\n        <h1 className=\"text-4xl font-extrabold text-gray-900 dark:text-white mb-6\">Form Builder</h1>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div\r\n            className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md flex flex-col items-center justify-center cursor-pointer hover:shadow-lg transition-shadow\"\r\n            onClick={handleCreateNewForm}\r\n          >\r\n            <div className=\"bg-blue-600 rounded-full p-3 mb-3\">\r\n              <svg\r\n                className=\"w-8 h-8 text-white\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M12 4v16m8-8H4\"\r\n                ></path>\r\n              </svg>\r\n            </div>\r\n            <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">Blank form</h2>\r\n          </div>\r\n\r\n          {/* Contact Information Template */}\r\n          <div\r\n            className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md flex flex-col items-center justify-center cursor-pointer hover:shadow-lg transition-shadow\"\r\n            onClick={() => handleTemplateSelect('contact')}\r\n          >\r\n            <div className=\"bg-green-200 dark:bg-green-800 rounded-full p-3 mb-3\">\r\n              <span className=\"text-green-800 dark:text-green-200 text-lg font-semibold\">Template Preview</span>\r\n            </div>\r\n            <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">Contact Information</h2>\r\n          </div>\r\n\r\n          {/* RSVP Template */}\r\n          <div\r\n            className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md flex flex-col items-center justify-center cursor-pointer hover:shadow-lg transition-shadow\"\r\n            onClick={() => handleTemplateSelect('rsvp')}\r\n          >\r\n            <div className=\"bg-purple-200 dark:bg-purple-800 rounded-full p-3 mb-3\">\r\n              <span className=\"text-purple-800 dark:text-purple-200 text-lg font-semibold\">Template Preview</span>\r\n            </div>\r\n            <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">RSVP</h2>\r\n          </div>\r\n\r\n          {/* Party Invite Template */}\r\n          <div\r\n            className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md flex flex-col items-center justify-center cursor-pointer hover:shadow-lg transition-shadow\"\r\n            onClick={() => handleTemplateSelect('partyInvite')}\r\n          >\r\n            <div className=\"bg-yellow-200 dark:bg-yellow-800 rounded-full p-3 mb-3\">\r\n              <span className=\"text-yellow-800 dark:text-yellow-200 text-lg font-semibold\">Template Preview</span>\r\n            </div>\r\n            <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200\">Party Invite</h2>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <section>\r\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Recent forms</h2>\r\n        {forms.length === 0 ? (\r\n          <p className=\"text-gray-600 dark:text-gray-300 bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md\">\r\n            No recent forms. Create one to see it here!\r\n          </p>\r\n        ) : (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {forms.map(form => (\r\n              <div\r\n                key={form.id}\r\n                className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow\"\r\n              >\r\n                <h3 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 truncate mb-2\" title={form.title}>\r\n                  {form.title}\r\n                </h3>\r\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-1\">Fields: {form.fields.length}</p>\r\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\r\n                  Created: {new Date(form.createdAt).toLocaleDateString()}\r\n                </p>\r\n                <div className=\"flex space-x-3\">\r\n                  <Link\r\n                    to={`/edit-form/${form.id}`}\r\n                    className=\"text-blue-600 hover:underline font-medium\"\r\n                  >\r\n                    View/Edit\r\n                  </Link>\r\n                  <Link\r\n                    to={`/form-preview/${form.id}`}\r\n                    className=\"text-green-600 hover:underline font-medium\"\r\n                  >\r\n                    Preview\r\n                  </Link>\r\n                  <button\r\n                    onClick={() => copyFormLink(form.id, setCopiedId)}\r\n                    className=\"relative text-purple-600 hover:underline font-medium flex items-center cursor-pointer\"\r\n                    aria-label=\"Copy form link\"\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"h-4 w-4 mr-1\"\r\n                      fill=\"none\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      stroke=\"currentColor\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth={2}\r\n                        d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\r\n                      />\r\n                    </svg>\r\n                    Copy Link\r\n                    {copiedId === form.id && (\r\n                      <span className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded w-max\">\r\n                        Link copied!\r\n                      </span>\r\n                    )}\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleDeleteForm(form.id)}\r\n                    className=\"relative text-red-600 hover:underline font-medium flex items-center cursor-pointer\"\r\n                    aria-label=\"Delete form\"\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"h-4 w-4 mr-1\"\r\n                      fill=\"none\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      stroke=\"currentColor\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth={2}\r\n                        d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\r\n                      />\r\n                    </svg>\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n}", "export default {'entry':{'module':'/build/entry.client-F2XDGM6L.js','imports':['/build/_shared/chunk-O4BRYNJ4.js','/build/_shared/chunk-NXADKNYK.js','/build/_shared/chunk-P6OU7LJU.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-U4FRFQSK.js','/build/_shared/chunk-XGOTYLZ5.js','/build/_shared/chunk-7M6SC7J5.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-MY3TLIEZ.js','imports':['/build/_shared/chunk-JCIKCEJC.js','/build/_shared/chunk-H3IBRTCX.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-VGLPTUCC.js','imports':['/build/_shared/chunk-3W5JBBFO.js','/build/_shared/chunk-RHCCIYCA.js','/build/_shared/chunk-FXUYPZOC.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/edit-form.$formId':{'id':'routes/edit-form.$formId','parentId':'root','path':'edit-form/:formId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/edit-form.$formId-6CIMWYU2.js','imports':['/build/_shared/chunk-K5SWTM3Z.js','/build/_shared/chunk-3W5JBBFO.js','/build/_shared/chunk-FXUYPZOC.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/form-builder':{'id':'routes/form-builder','parentId':'root','path':'form-builder','index':undefined,'caseSensitive':undefined,'module':'/build/routes/form-builder-FAX7EYUF.js','imports':['/build/_shared/chunk-K5SWTM3Z.js','/build/_shared/chunk-3W5JBBFO.js','/build/_shared/chunk-FXUYPZOC.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/form-preview.$formId':{'id':'routes/form-preview.$formId','parentId':'root','path':'form-preview/:formId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/form-preview.$formId-AJNA2XX2.js','imports':['/build/_shared/chunk-EMC6MKFJ.js','/build/_shared/chunk-RHCCIYCA.js','/build/_shared/chunk-FXUYPZOC.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/form.$formId':{'id':'routes/form.$formId','parentId':'root','path':'form/:formId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/form.$formId-WBKAVMZA.js','imports':['/build/_shared/chunk-EMC6MKFJ.js','/build/_shared/chunk-RHCCIYCA.js','/build/_shared/chunk-FXUYPZOC.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'0fff18e2','hmr':{'runtime':'/build/_shared\\\\chunk-P6OU7LJU.js','timestamp':1751116302893},'url':'/build/manifest-0FFF18E2.js'};"],
  "mappings": "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",
  "names": ["jsxDEV", "jsxDEV", "useEffect", "useState", "jsxDEV", "jsxDEV", "useState", "useEffect", "useParams", "jsxDEV", "useEffect", "useRef", "useNavigate", "useParams", "useSelector", "useDispatch", "jsxDEV", "jsxDEV", "useSelector", "useSelector", "useDispatch", "useState", "useDispatch", "jsxDEV", "jsxDEV", "useDispatch", "jsxDEV", "jsxDEV", "jsxDEV", "jsxDEV", "useDispatch", "useState", "useSelector", "jsxDEV", "useSelector", "jsxDEV", "useSelector", "useDispatch", "useNavigate", "useParams", "useRef", "useEffect", "useParams", "jsxDEV", "useParams", "jsxDEV", "useParams", "jsxDEV", "useParams", "useState", "useEffect", "Link", "useNavigate", "jsxDEV", "useState", "useNavigate", "useEffect", "Link"]
}
